--
-- PostgreSQL database dump
--

-- Dumped from database version 10.3
-- Dumped by pg_dump version 10.3

-- Started on 2018-05-06 16:08:16

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 18 (class 2615 OID 28010)
-- Name: tiger; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA tiger;


--
-- TOC entry 15 (class 2615 OID 28280)
-- Name: tiger_data; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA tiger_data;


--
-- TOC entry 14 (class 2615 OID 28439)
-- Name: topology; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA topology;


--
-- TOC entry 4962 (class 0 OID 0)
-- Dependencies: 14
-- Name: SCHEMA topology; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA topology IS 'PostGIS Topology schema';


--
-- TOC entry 1 (class 3079 OID 12924)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 4963 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 5 (class 3079 OID 27905)
-- Name: address_standardizer; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS address_standardizer WITH SCHEMA public;


--
-- TOC entry 4964 (class 0 OID 0)
-- Dependencies: 5
-- Name: EXTENSION address_standardizer; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION address_standardizer IS 'Used to parse an address into constituent elements. Generally used to support geocoding address normalization step.';


--
-- TOC entry 4 (class 3079 OID 27912)
-- Name: address_standardizer_data_us; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS address_standardizer_data_us WITH SCHEMA public;


--
-- TOC entry 4965 (class 0 OID 0)
-- Dependencies: 4
-- Name: EXTENSION address_standardizer_data_us; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION address_standardizer_data_us IS 'Address Standardizer US dataset example';


--
-- TOC entry 7 (class 3079 OID 27800)
-- Name: citext; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;


--
-- TOC entry 4966 (class 0 OID 0)
-- Dependencies: 7
-- Name: EXTENSION citext; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION citext IS 'data type for case-insensitive character strings';


--
-- TOC entry 6 (class 3079 OID 27894)
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- TOC entry 4967 (class 0 OID 0)
-- Dependencies: 6
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- TOC entry 3 (class 3079 OID 27955)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- TOC entry 4968 (class 0 OID 0)
-- Dependencies: 3
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- TOC entry 8 (class 3079 OID 26301)
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- TOC entry 4969 (class 0 OID 0)
-- Dependencies: 8
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- TOC entry 2 (class 3079 OID 27992)
-- Name: postgis_sfcgal; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_sfcgal WITH SCHEMA public;


--
-- TOC entry 4970 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION postgis_sfcgal; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis_sfcgal IS 'PostGIS SFCGAL functions';


--
-- TOC entry 9 (class 3079 OID 28011)
-- Name: postgis_tiger_geocoder; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder WITH SCHEMA tiger;


--
-- TOC entry 4971 (class 0 OID 0)
-- Dependencies: 9
-- Name: EXTENSION postgis_tiger_geocoder; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis_tiger_geocoder IS 'PostGIS tiger geocoder and reverse geocoder';


--
-- TOC entry 10 (class 3079 OID 28440)
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- TOC entry 4972 (class 0 OID 0)
-- Dependencies: 10
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


--
-- TOC entry 1670 (class 1255 OID 28581)
-- Name: add_images(uuid, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_images(id uuid, images_count integer, OUT images uuid[]) RETURNS uuid[]
    LANGUAGE plpgsql
    AS $$
DECLARE
new_id uuid;
BEGIN
 WHILE images_count > 0 LOOP 
  INSERT into product_images (product_id) VALUES(id) RETURNING image_id INTO new_id;
  SELECT * FROM array_append(images, new_id) INTO images;
  images_count := images_count - 1;
 END LOOP;
END;
$$;


--
-- TOC entry 498 (class 1255 OID 28582)
-- Name: add_product(character varying, uuid, text, character varying, numeric, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_product(_name character varying, _owner uuid, _description text, _category character varying, _price numeric, images_count integer) RETURNS TABLE(id uuid, name character varying, description text, created_at date, category character varying, price numeric, owner uuid, images uuid[], sold boolean, latitude double precision, longitude double precision)
    LANGUAGE plpgsql
    AS $$ DECLARE   id uuid; BEGIN	  INSERT INTO products (name, description, category, price, owner)  VALUES (_name, _description, _category, _price, _owner) RETURNING uuid INTO id;   PERFORM add_product_images(id, images_count);  RETURN QUERY SELECT * FROM get_product_by_id(id); END; $$;


--
-- TOC entry 1128 (class 1255 OID 28583)
-- Name: add_product_images(uuid, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_product_images(id uuid, images_count integer, OUT images uuid[]) RETURNS uuid[]
    LANGUAGE plpgsql
    AS $$
DECLARE
new_id uuid;
BEGIN
 WHILE images_count > 0 LOOP 
  INSERT into product_images (product_id) VALUES(id) RETURNING image_id INTO new_id;
  SELECT * FROM array_append(images, new_id) INTO images;
  images_count := images_count - 1;
 END LOOP;
END;
$$;


--
-- TOC entry 1490 (class 1255 OID 28584)
-- Name: add_review(integer, text, uuid, uuid, uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_review(_rating integer, _description text, _source_id uuid, _target_id uuid, _product_id uuid) RETURNS TABLE(id integer, rating integer, description text, source_id uuid, target_id uuid, product_id uuid, created_at date)
    LANGUAGE sql
    AS $$ 
INSERT INTO 
reviews (rating, description, source_id, target_id, product_id) 
VALUES (_rating, _description, _source_id, _target_id, _product_id) 
RETURNING id, rating, description, source_id, target_id, product_id, created_at;
$$;


--
-- TOC entry 558 (class 1255 OID 28585)
-- Name: add_user(character varying, public.citext, text, text, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_user(_name character varying, _email public.citext, _hash text, _salt text, _latitude double precision, _longitude double precision) RETURNS TABLE(id uuid, name character varying, email public.citext, longitude double precision, latitude double precision, image uuid, rating integer)
    LANGUAGE plpgsql
    AS $$ DECLARE    userId uuid; BEGIN	  INSERT INTO users (name, email, hash, salt, location)  VALUES (_name, _email, _hash, _salt,  ST_Point(_latitude, _longitude)) RETURNING uuid INTO userId;  RETURN QUERY SELECT * FROM users_details WHERE users_details.id = userId; END; $$;


--
-- TOC entry 1662 (class 1255 OID 28586)
-- Name: add_user_image(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_user_image(id uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$ DECLARE new_id uuid; BEGIN   INSERT into user_images (user_id) VALUES(id) RETURNING image_id INTO new_id;    RETURN new_id; END; $$;


--
-- TOC entry 1136 (class 1255 OID 28587)
-- Name: delete_product(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_product(id uuid) RETURNS void
    LANGUAGE sql
    AS $_$
 DELETE FROM product_images WHERE product_id=$1;
 DELETE FROM products WHERE uuid=$1;
$_$;


--
-- TOC entry 420 (class 1255 OID 28588)
-- Name: delete_product_images(uuid[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_product_images(_images uuid[]) RETURNS void
    LANGUAGE plpgsql
    AS $$ DECLARE id_to_delete uuid; BEGIN  FOREACH id_to_delete in ARRAY _images  LOOP  DELETE FROM product_images WHERE image_id=id_to_delete;  END LOOP; END; $$;


--
-- TOC entry 666 (class 1255 OID 28589)
-- Name: delete_user(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_user(_id uuid) RETURNS void
    LANGUAGE sql
    AS $$ DELETE FROM users WHERE uuid=_id ; $$;


--
-- TOC entry 712 (class 1255 OID 28590)
-- Name: delete_user_image(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_user_image(_image uuid) RETURNS void
    LANGUAGE sql
    AS $$ DELETE FROM user_images WHERE image_id=_image; $$;


--
-- TOC entry 713 (class 1255 OID 28591)
-- Name: get_product_by_id(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_product_by_id(id uuid) RETURNS TABLE(id uuid, name character varying, description text, created_at date, category character varying, price numeric, owner uuid, images uuid[], sold boolean, latitude double precision, longitude double precision)
    LANGUAGE sql
    AS $_$ SELECT * FROM products_details WHERE id=$1 $_$;


--
-- TOC entry 325 (class 1255 OID 28592)
-- Name: get_product_images(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_product_images(_id uuid) RETURNS uuid[]
    LANGUAGE sql
    AS $$ SELECT images
	FROM products_with_images
	WHERE id=_id $$;


--
-- TOC entry 456 (class 1255 OID 28593)
-- Name: get_product_with_images_by_id(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_product_with_images_by_id(id uuid) RETURNS TABLE(id uuid, name character varying, description text, category character varying, price numeric, user_id uuid, images uuid[])
    LANGUAGE sql
    AS $_$ SELECT * FROM products_with_images WHERE id=$1 $_$;


--
-- TOC entry 1231 (class 1255 OID 28594)
-- Name: get_products_by_owner(uuid, boolean, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_products_by_owner(_owner uuid, _sold boolean DEFAULT NULL::boolean, _last_id text DEFAULT ''::text) RETURNS TABLE(id uuid, name character varying, description text, created_at date, category character varying, price numeric, owner uuid, images uuid[], sold boolean, longitude double precision, latitude double precision)
    LANGUAGE plpgsql
    AS $$
DECLARE 
ignore_sold boolean := _sold IS NULL; 
last_id uuid := '00000000-0000-0000-0000-000000000000'::uuid;
 BEGIN
 IF _last_id <> '' 
 THEN last_id := _last_id::uuid;
 END IF;  
 RETURN QUERY SELECT * FROM products_details WHERE products_details.owner  = _owner AND (ignore_sold OR products_details.sold = _sold) AND products_details.id > last_id::uuid FETCH FIRST 20 ROWS ONLY;
 END
$$;


--
-- TOC entry 1545 (class 1255 OID 28595)
-- Name: get_products_paginated(character varying, character varying, integer, double precision, double precision, text, character varying, numeric, numeric, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_products_paginated(sort character varying, sort_order character varying, radius integer, _latitude double precision, _longitude double precision, _last_id text DEFAULT ''::text, _category character varying DEFAULT ''::character varying, _min_price numeric DEFAULT 0, _max_price numeric DEFAULT 99999, _sold boolean DEFAULT NULL::boolean) RETURNS TABLE(id uuid, name character varying, description text, created_at date, category character varying, price numeric, owner uuid, images uuid[], sold boolean, latitude double precision, longitude double precision)
    LANGUAGE plpgsql
    AS $_$
DECLARE 
descending boolean := sort_order = 'descending';
sort_by_distance boolean := sort = 'distance';
last_id text := '';
min_price numeric := 0;
max_price numeric := 99999;
ignore_sold boolean := _sold = _sold IS NULL;
last_price numeric := 0;
ignore_category boolean := _category = '' OR _category IS NULL; 
last_product_id uuid;
last_owner_id uuid;
distance float := 0;
origin geography := ST_Point(_latitude, _longitude);
sql text := '
SELECT products_with_images.*,
ST_X(users.location::geometry) as latitude, ST_Y(users.location::geometry) as longitude
FROM products_with_images JOIN users
ON ST_DWithin(users.location, $4, 1000*$3) 
AND products_with_images.owner=users.uuid
WHERE price BETWEEN $7 AND $8
AND ($13 OR products_with_images.sold=$9)
AND ($11 OR products_with_images.category=$5)
';

group_by text := ' GROUP BY products_with_images.id, products_with_images.description, 
products_with_images.category, products_with_images.created_at, 
products_with_images.name, products_with_images.price,  
products_with_images.owner,  products_with_images.sold,  
products_with_images.images, users.location';
BEGIN 

IF _last_id IS NOT NULL
THEN last_id := _last_id;
END IF;

IF _min_price IS NOT NULL
THEN min_price = _min_price;
END IF;

IF _max_price IS NOT NULL
THEN max_price = _max_price;
END IF;

CASE 
  WHEN last_id='' AND (descending IS FALSE OR sort_by_distance IS TRUE) THEN 
    last_product_id := '00000000-0000-0000-0000-000000000000'::uuid;
    last_price := 0;
  WHEN last_id='' AND descending IS TRUE THEN 
    last_product_id := 'ffffffff-ffff-ffff-ffff-ffffffffffff'::uuid;   
    last_price := 99999;
  ELSE 
    last_product_id := last_id::uuid;  
    SELECT products.price, products.owner from products WHERE products.uuid = last_product_id INTO last_price, last_owner_id;
    IF sort_by_distance IS TRUE
    THEN 
      SELECT ST_Distance(origin, users.location) FROM users WHERE users.uuid = last_owner_id INTO distance; 
    END IF;
END CASE;

IF sort_by_distance IS TRUE 
THEN
  sql := sql || ' AND (ST_Distance($4, users.location), products_with_images.id) > ($6, $10)';
ELSEIF descending IS TRUE 
THEN
    sql := sql || ' AND (products_with_images.price,  products_with_images.id) < ($12, $10)';
ELSEIF descending IS FALSE
THEN
    sql := sql || ' AND (products_with_images.price,  products_with_images.id) > ($12, $10)';
END IF;

sql := sql || group_by;

IF sort_by_distance IS TRUE THEN
  sql := sql || ' ORDER BY ST_Distance($4, users.location), products_with_images.id';
ELSEIF descending IS TRUE THEN
  sql := sql ||' ORDER BY products_with_images.price DESC,  products_with_images.id DESC';
ELSEIF descending IS FALSE THEN
  sql := sql || ' ORDER BY products_with_images.price, products_with_images.id';
END IF;

sql := sql || ' FETCH FIRST 20 ROWS ONLY;';


RETURN QUERY EXECUTE sql USING sort_by_distance, descending,  radius, origin, _category, distance, min_price, max_price, _sold, last_product_id, ignore_category, last_price, ignore_sold;
END     
$_$;


--
-- TOC entry 1286 (class 1255 OID 28596)
-- Name: get_user_image(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_user_image(_id uuid) RETURNS uuid
    LANGUAGE sql
    AS $$   SELECT image_id   FROM user_images   WHERE user_id = _id;   $$;


--
-- TOC entry 335 (class 1255 OID 28597)
-- Name: get_user_rating(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_user_rating(_id uuid) RETURNS integer
    LANGUAGE sql
    AS $$ SELECT round(avg(rating))::integer FROM reviews WHERE target = _id::uuid $$;


--
-- TOC entry 1153 (class 1255 OID 28598)
-- Name: get_user_reviews(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_user_reviews(_id uuid) RETURNS TABLE(id uuid, rating integer, description text, source_id uuid, target_id uuid, product_id uuid)
    LANGUAGE sql
    AS $$ 
SELECT uuid as id, rating, description, source_id, target_id, product_id
FROM reviews
WHERE target_id = _id;
$$;


--
-- TOC entry 587 (class 1255 OID 28599)
-- Name: update_product(uuid, character varying, text, character varying, numeric, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_product(_id uuid, _name character varying, _description text, _category character varying, _price numeric, _sold boolean) RETURNS TABLE(id uuid, name character varying, description text, created_at date, category character varying, price numeric, owner uuid, images uuid[], sold boolean, latitude double precision, longitude double precision)
    LANGUAGE plpgsql
    AS $$ BEGIN	  UPDATE products  SET (name, description, category, price, sold) = (_name, _description, _category, _price, _sold)  WHERE uuid=_id;   RETURN QUERY SELECT * FROM get_product_by_id(_id); END; $$;


--
-- TOC entry 1461 (class 1255 OID 28600)
-- Name: update_user(uuid, character varying, public.citext, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_user(_id uuid, _name character varying, _email public.citext, _latitude double precision, _longitude double precision) RETURNS TABLE(id uuid, name character varying, email public.citext, longitude double precision, latitude double precision, image uuid, rating integer)
    LANGUAGE plpgsql
    AS $$ BEGIN	  UPDATE users  SET (name, email, location) = (_name, _email, ST_Point(_latitude, _longitude))  WHERE uuid=_id;  RETURN QUERY SELECT * FROM users_details WHERE users_details.id = _id; END; $$;


--
-- TOC entry 697 (class 1255 OID 28601)
-- Name: update_user_email(uuid, public.citext); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_user_email(_id uuid, _email public.citext) RETURNS TABLE(id uuid, name character varying, email public.citext, longitude double precision, latitude double precision, image uuid, rating integer)
    LANGUAGE plpgsql
    AS $$ BEGIN	  UPDATE users  SET (email) = (_email)  WHERE uuid=_id;  RETURN QUERY SELECT * FROM users_details WHERE users_details.id = _id; END; $$;


--
-- TOC entry 1218 (class 1255 OID 28602)
-- Name: update_user_password(uuid, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_user_password(_id uuid, _hash text, _salt text) RETURNS void
    LANGUAGE sql
    AS $$
 UPDATE users
 SET (hash, salt) = (_hash, _salt)
 WHERE uuid = _id;
$$;


SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 286 (class 1259 OID 28603)
-- Name: categories; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.categories (
    id integer NOT NULL,
    category character varying(30) NOT NULL
);


--
-- TOC entry 287 (class 1259 OID 28606)
-- Name: categories_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.categories_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 4973 (class 0 OID 0)
-- Dependencies: 287
-- Name: categories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.categories_id_seq OWNED BY public.categories.id;


--
-- TOC entry 288 (class 1259 OID 28608)
-- Name: product_images; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.product_images (
    id integer NOT NULL,
    image_id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL
);


--
-- TOC entry 289 (class 1259 OID 28612)
-- Name: product_images_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.product_images_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 4974 (class 0 OID 0)
-- Dependencies: 289
-- Name: product_images_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.product_images_id_seq OWNED BY public.product_images.id;


--
-- TOC entry 290 (class 1259 OID 28614)
-- Name: products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.products (
    id integer NOT NULL,
    uuid uuid DEFAULT public.gen_random_uuid() NOT NULL,
    description text NOT NULL,
    category character varying(30) NOT NULL,
    price numeric NOT NULL,
    created_at date DEFAULT now() NOT NULL,
    sold boolean DEFAULT false NOT NULL,
    name character varying(100) NOT NULL,
    owner uuid NOT NULL
);

CREATE TABLE public.chats (
    seller_id uuid NOT NULL,
    buyer_id uuid NOT NULL,
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    product_id uuid NOT NULL,
    CONSTRAINT uuid UNIQUE (uuid),
    CONSTRAINT buyer FOREIGN KEY (buyer_id)
        REFERENCES public.users (uuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT product FOREIGN KEY (product_id)
        REFERENCES public.products (uuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT seller FOREIGN KEY (seller_id)
        REFERENCES public.users (uuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT buyer_and_sellers_are_different CHECK (buyer_id <> seller_id)
)

CREATE TABLE public.chat_messages (
    message text COLLATE pg_catalog."default" NOT NULL,
    author_id uuid NOT NULL,
    "timestamp" time with time zone NOT NULL,
    chat_id uuid NOT NULL,
    CONSTRAINT author FOREIGN KEY (author_id)
        REFERENCES public.users (uuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT chat FOREIGN KEY (chat_id)
        REFERENCES public.chats (uuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

--
-- TOC entry 291 (class 1259 OID 28623)
-- Name: products_with_images; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.products_with_images AS
 SELECT products.uuid AS id,
    products.name,
    products.description,
    products.created_at,
    products.category,
    products.price,
    products.owner,
    array_agg(product_images.image_id) AS images,
    products.sold
   FROM (public.products
     LEFT JOIN public.product_images ON ((products.uuid = product_images.product_id)))
  GROUP BY products.uuid, products.name, products.description, products.created_at, products.category, products.price, products.owner, products.sold;


--
-- TOC entry 292 (class 1259 OID 28627)
-- Name: users; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.users (
    id integer NOT NULL,
    uuid uuid DEFAULT public.gen_random_uuid() NOT NULL,
    email public.citext NOT NULL,
    name character varying(100) NOT NULL,
    location public.geography(Point,4326) NOT NULL,
    hash text NOT NULL,
    salt text NOT NULL
);


--
-- TOC entry 293 (class 1259 OID 28634)
-- Name: products_details; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.products_details AS
 SELECT products_with_images.id,
    products_with_images.name,
    products_with_images.description,
    products_with_images.created_at,
    products_with_images.category,
    products_with_images.price,
    products_with_images.owner,
    products_with_images.images,
    products_with_images.sold,
    public.st_x((users.location)::public.geometry) AS latitude,
    public.st_y((users.location)::public.geometry) AS longitude
   FROM (public.products_with_images
     JOIN public.users ON ((products_with_images.owner = users.uuid)))
  GROUP BY products_with_images.id, products_with_images.name, products_with_images.description, products_with_images.created_at, products_with_images.category, products_with_images.price, products_with_images.owner, products_with_images.images, products_with_images.sold, users.location;


--
-- TOC entry 294 (class 1259 OID 28639)
-- Name: products_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.products_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 4975 (class 0 OID 0)
-- Dependencies: 294
-- Name: products_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.products_id_seq OWNED BY public.products.id;


--
-- TOC entry 295 (class 1259 OID 28641)
-- Name: reviews; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.reviews (
    id integer NOT NULL,
    rating integer NOT NULL,
    description text,
    source_id uuid NOT NULL,
    target_id uuid NOT NULL,
    product_id uuid NOT NULL,
    created_at date DEFAULT ('now'::text)::date NOT NULL,
    uuid uuid DEFAULT public.gen_random_uuid() NOT NULL,
    CONSTRAINT valid_rating CHECK (((rating >= 0) AND (rating <= 5)))
);


--
-- TOC entry 296 (class 1259 OID 28650)
-- Name: reviews_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.reviews_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 4976 (class 0 OID 0)
-- Dependencies: 296
-- Name: reviews_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.reviews_id_seq OWNED BY public.reviews.id;


--
-- TOC entry 297 (class 1259 OID 28652)
-- Name: transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.transactions (
    id integer NOT NULL,
    buyer uuid NOT NULL,
    seller uuid NOT NULL,
    product uuid NOT NULL
);


--
-- TOC entry 298 (class 1259 OID 28655)
-- Name: transactions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.transactions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 4977 (class 0 OID 0)
-- Dependencies: 298
-- Name: transactions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.transactions_id_seq OWNED BY public.transactions.id;


--
-- TOC entry 299 (class 1259 OID 28657)
-- Name: user_images; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.user_images (
    id integer NOT NULL,
    image_id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL
);


--
-- TOC entry 300 (class 1259 OID 28661)
-- Name: user_images_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.user_images_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 4978 (class 0 OID 0)
-- Dependencies: 300
-- Name: user_images_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.user_images_id_seq OWNED BY public.user_images.id;


--
-- TOC entry 301 (class 1259 OID 28663)
-- Name: users_with_images; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.users_with_images AS
 SELECT users.uuid AS id,
    users.name,
    users.email,
    public.st_x((users.location)::public.geometry) AS longitude,
    public.st_y((users.location)::public.geometry) AS latitude,
    user_images.image_id AS image
   FROM (public.users
     LEFT JOIN public.user_images ON ((users.uuid = user_images.user_id)))
  GROUP BY users.uuid, users.name, users.email, users.location, user_images.user_id, user_images.image_id;


--
-- TOC entry 302 (class 1259 OID 28667)
-- Name: users_details; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.users_details AS
 SELECT users_with_images.id,
    users_with_images.name,
    users_with_images.email,
    users_with_images.longitude,
    users_with_images.latitude,
    users_with_images.image,
    (COALESCE(round(avg(reviews.rating)), (0)::numeric))::integer AS rating
   FROM (public.users_with_images
     LEFT JOIN public.reviews ON ((users_with_images.id = reviews.target_id)))
  GROUP BY users_with_images.id, users_with_images.name, users_with_images.email, users_with_images.image, reviews.target_id, users_with_images.longitude, users_with_images.latitude;


--
-- TOC entry 303 (class 1259 OID 28672)
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 4979 (class 0 OID 0)
-- Dependencies: 303
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- TOC entry 4764 (class 2604 OID 28674)
-- Name: categories id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.categories ALTER COLUMN id SET DEFAULT nextval('public.categories_id_seq'::regclass);


--
-- TOC entry 4766 (class 2604 OID 28675)
-- Name: product_images id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.product_images ALTER COLUMN id SET DEFAULT nextval('public.product_images_id_seq'::regclass);


--
-- TOC entry 4770 (class 2604 OID 28676)
-- Name: products id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.products ALTER COLUMN id SET DEFAULT nextval('public.products_id_seq'::regclass);


--
-- TOC entry 4775 (class 2604 OID 28677)
-- Name: reviews id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.reviews ALTER COLUMN id SET DEFAULT nextval('public.reviews_id_seq'::regclass);


--
-- TOC entry 4777 (class 2604 OID 28678)
-- Name: transactions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transactions ALTER COLUMN id SET DEFAULT nextval('public.transactions_id_seq'::regclass);


--
-- TOC entry 4779 (class 2604 OID 28679)
-- Name: user_images id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_images ALTER COLUMN id SET DEFAULT nextval('public.user_images_id_seq'::regclass);


--
-- TOC entry 4772 (class 2604 OID 28680)
-- Name: users id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- TOC entry 4781 (class 2606 OID 28684)
-- Name: categories categories_category_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_category_key UNIQUE (category);


--
-- TOC entry 4783 (class 2606 OID 28686)
-- Name: categories categories_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);


--
-- TOC entry 4785 (class 2606 OID 28688)
-- Name: product_images product_images_image_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.product_images
    ADD CONSTRAINT product_images_image_id_key UNIQUE (image_id);


--
-- TOC entry 4787 (class 2606 OID 28690)
-- Name: product_images product_images_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.product_images
    ADD CONSTRAINT product_images_pkey PRIMARY KEY (id);


--
-- TOC entry 4790 (class 2606 OID 28692)
-- Name: products products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);


--
-- TOC entry 4792 (class 2606 OID 28694)
-- Name: products products_uuid_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_uuid_key UNIQUE (uuid);


--
-- TOC entry 4804 (class 2606 OID 28696)
-- Name: reviews reviews_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_pkey PRIMARY KEY (id);


--
-- TOC entry 4806 (class 2606 OID 28698)
-- Name: reviews reviews_uuid_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_uuid_key UNIQUE (uuid);


--
-- TOC entry 4808 (class 2606 OID 28700)
-- Name: transactions transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);


--
-- TOC entry 4810 (class 2606 OID 28702)
-- Name: user_images user_images_image_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_images
    ADD CONSTRAINT user_images_image_id_key UNIQUE (image_id);


--
-- TOC entry 4812 (class 2606 OID 28704)
-- Name: user_images user_images_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_images
    ADD CONSTRAINT user_images_pkey PRIMARY KEY (id);


--
-- TOC entry 4794 (class 2606 OID 28706)
-- Name: users users_email_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- TOC entry 4796 (class 2606 OID 28709)
-- Name: users users_hash_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_hash_key UNIQUE (hash);


--
-- TOC entry 4798 (class 2606 OID 28711)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 4800 (class 2606 OID 28713)
-- Name: users users_salt_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_salt_key UNIQUE (salt);


--
-- TOC entry 4802 (class 2606 OID 28715)
-- Name: users users_uuid_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_uuid_key UNIQUE (uuid);


--
-- TOC entry 4788 (class 1259 OID 28716)
-- Name: products_category_price_uuid_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX products_category_price_uuid_idx ON public.products USING btree (category, price, uuid);


--
-- TOC entry 4813 (class 2606 OID 28718)
-- Name: product_images product_images_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.product_images
    ADD CONSTRAINT product_images_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(uuid) ON DELETE CASCADE;


--
-- TOC entry 4814 (class 2606 OID 28723)
-- Name: products products_category_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_category_fkey FOREIGN KEY (category) REFERENCES public.categories(category);


--
-- TOC entry 4815 (class 2606 OID 28728)
-- Name: products products_owner_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_owner_fkey FOREIGN KEY (owner) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- TOC entry 4816 (class 2606 OID 28733)
-- Name: reviews reviews_product_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_product_fkey FOREIGN KEY (product_id) REFERENCES public.products(uuid) ON DELETE CASCADE;


--
-- TOC entry 4817 (class 2606 OID 28738)
-- Name: reviews reviews_source_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_source_fkey FOREIGN KEY (source_id) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- TOC entry 4818 (class 2606 OID 28743)
-- Name: reviews reviews_target_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_target_fkey FOREIGN KEY (target_id) REFERENCES public.users(uuid) ON DELETE CASCADE;


--
-- TOC entry 4821 (class 2606 OID 28748)
-- Name: transactions transactions_buyer_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_buyer_fkey FOREIGN KEY (buyer) REFERENCES public.users(uuid);


--
-- TOC entry 4820 (class 2606 OID 28753)
-- Name: transactions transactions_product_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_product_fkey FOREIGN KEY (product) REFERENCES public.products(uuid);


--
-- TOC entry 4819 (class 2606 OID 28758)
-- Name: transactions transactions_seller_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_seller_fkey FOREIGN KEY (seller) REFERENCES public.users(uuid);


--
-- TOC entry 4822 (class 2606 OID 28763)
-- Name: user_images user_images_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_images
    ADD CONSTRAINT user_images_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(uuid) ON DELETE CASCADE;


-- Completed on 2018-05-06 16:08:17

--
-- PostgreSQL database dump complete
--

